{"version":3,"sources":["modules/MainShop/components/ShopItemTable.tsx","actions/index.ts","modules/MainShop/components/WelcomeMessage.tsx","modules/MainShop/components/MainShop.tsx","data/shopItems.ts","modules/MainShop/MainShopReducer.ts","api/shop.js","store.ts","serviceWorker.js","index.js"],"names":["ShopItemTable","props","items","length","Table","striped","bordered","hover","map","item","key","sku","className","name","quality","sellIn","getItemRows","updateItemsQuality","type","WelcomeMessage","Alert","variant","Heading","connector","connect","state","itemsForSale","mainShop","itemsWithDiscount","dispatch","bindActionCreators","tabTitleForSale","tabTitleWithDiscount","Container","Row","Col","Navbar","bg","Brand","href","Tabs","defaultActiveKey","id","Tab","eventKey","title","Card","Button","onClick","apiShop","this","Shop","formatItemsData","i","Math","max","min","getItems","shopItemsData","groupItems","filter","initialState","console","log","allReducers","combineReducers","action","newState","updateQuality","oneStore","createStore","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.050ec719.chunk.js","sourcesContent":["import React from 'react';\nimport { Table } from 'react-bootstrap';\nimport { ShopItem } from '../../../types';\n\ntype ShopItemTableProps = {\n  items: ShopItem[]\n};\n\nfunction getItemRows(items: ShopItem[]) {\n  return items.map((item: ShopItem) => (\n    <tr key={item.sku} className=\"item-row\">\n      <td>{item.name}</td>\n      <td>{item.quality || 0}</td>\n      <td>{item.sellIn || 0}</td>\n    </tr>\n  ));\n}\n\nfunction ShopItemTable(props: ShopItemTableProps) {\n  const { items } = props;\n\n  if (items.length === 0) {\n    return (\n      <div>\n        No items found. Please check other sections.\n      </div>\n    );\n  }\n\n  return (\n    <Table striped bordered hover>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Quality</th>\n          <th>Sell In Days</th>\n        </tr>\n      </thead>\n      <tbody>\n        {getItemRows(items)}\n      </tbody>\n    </Table>\n  );\n}\n\nexport default ShopItemTable;\n","/* eslint-disable import/prefer-default-export */\n\nexport function updateItemsQuality() {\n  return {\n    type: 'mainShop/updateItemsQuality',\n  };\n}\n\n/*\nexport function anotherAction() {\n  return {\n    type: 'module/anotherAction',\n    payload: 'some payload',\n  };\n}\n*/\n","import React from 'react';\nimport Alert from 'react-bootstrap/Alert';\n\nfunction WelcomeMessage() {\n  return (\n    <Alert variant=\"info\">\n      <Alert.Heading>Welcome!</Alert.Heading>\n      <p>\n        Hi and welcome to team Gilded Rose. As you know, we are a small inn with a prime location in a\n        prominent city ran by a friendly innkeeper named Allison. We also buy and sell only the finest goods.\n        Unfortunately, our goods are constantly degrading in quality as they approach their sell by date. We\n        have a system in place that updates our inventory for us. It was developed by a no-nonsense type named\n        Leeroy, who has moved on to new adventures.  Please take a look at the feature requests section to learn\n        how you can help us.\n      </p>\n    </Alert>\n  );\n}\n\nexport default WelcomeMessage;\n","import React from 'react';\nimport {\n  Button, Container, Row, Col, Navbar, Tab, Tabs, Card,\n} from 'react-bootstrap';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { MainShopState } from '../../../types';\nimport ShopItemTable from './ShopItemTable';\nimport { updateItemsQuality } from '../../../actions/index';\nimport '../../../App.css';\nimport WelcomeMessage from './WelcomeMessage';\n\ntype PartialState = {\n  mainShop: MainShopState,\n};\n\nconst mapStateToProps = (state: PartialState) => ({\n  itemsForSale: state.mainShop.itemsForSale,\n  itemsWithDiscount: state.mainShop.itemsWithDiscount,\n});\n\nconst matchDispatchToProps = (dispatch: Dispatch) => bindActionCreators({\n  updateItemsQuality,\n}, dispatch);\n\nconst connector = connect(mapStateToProps, matchDispatchToProps);\n\n// Infer type from redux.\ntype PropsInferred = ConnectedProps<typeof connector>;\n\nconst MainShop = (props: PropsInferred) => {\n  const { itemsForSale, itemsWithDiscount } = props;\n  const tabTitleForSale = `On Sale (${itemsForSale.length})`;\n  const tabTitleWithDiscount = `Discount (${itemsWithDiscount.length})`;\n  return (\n    <div className=\"App\">\n      <Container>\n        <Row>\n          <Col>\n            <Navbar bg=\"light\">\n              <Navbar.Brand href=\"#home\">The Gilded Rose</Navbar.Brand>\n            </Navbar>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <WelcomeMessage />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Tabs defaultActiveKey=\"sale\" id=\"uncontrolled-tab-example\">\n              <Tab eventKey=\"sale\" title={tabTitleForSale}>\n                <Card>\n                  <ShopItemTable items={itemsForSale} />\n                </Card>\n              </Tab>\n              <Tab eventKey=\"discount\" title={tabTitleWithDiscount}>\n                <Card>\n                  <ShopItemTable items={itemsWithDiscount} />\n                </Card>\n              </Tab>\n            </Tabs>\n            <Button onClick={() => props.updateItemsQuality()}>Update Quality</Button>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default connector(MainShop);\n","const items = [\n  {\n    sku: 'BRIE',\n    name: 'Aged Brie',\n    quality: 3,\n    sellIn: 60,\n  },\n  {\n    sku: 'BSPASS',\n    name: 'Backstage passes to a TAFKAL80ETC concert',\n    quality: 8,\n    sellIn: 15,\n  },\n  {\n    sku: 'GODLY',\n    name: 'Sulfuras, Hand of Ragnaros',\n    quality: 80,\n    sellIn: 1000,\n  },\n  {\n    sku: 'G001',\n    name: 'Generic, very boring item',\n    quality: 2,\n    sellIn: 100,\n  },\n  {\n    sku: 'MAGIC',\n    name: 'Conjured Item',\n    quality: 40,\n    sellIn: 10,\n  },\n];\n\nexport default items;\n","import shopItemsData from '../../data/shopItems';\nimport ApiShop from '../../api/shop';\nimport { ShopItem, MainShopState } from '../../types';\n\n// Using mock API and mock data here.\n// WARNING: With real API we may want to update code to leverage redux-thunk or redux-saga.\n//          See https://redux.js.org/tutorials/fundamentals/part-6-async-logic\nconst apiShop = new ApiShop(shopItemsData);\n\n// Separate items into itemsForSale and itemsWithDiscount based on:\n// If the Quality or SellIn Date reaches zero, remove it from the on-sale section, and show it in the discount section.\n// Add a numeric count of the On Sale and Discount Items to the tab headers using components from our chosen component library.\nfunction groupItems(items: ShopItem[]):MainShopState {\n  return {\n    itemsForSale: items.filter((item) => item.quality > 0 && item.sellIn > 0),\n    itemsWithDiscount: items.filter((item) => item.quality === 0 || item.sellIn <= 0),\n  };\n}\n\nconst initialState = groupItems(apiShop.getItems());\nconsole.log('Initial shop state: ', initialState);\n\ntype MainShopAction = {\n  type: string;\n};\n\nexport default function mainShopReducer(state = initialState, action:MainShopAction):MainShopState {\n  switch (action.type) {\n    case 'mainShop/updateItemsQuality': {\n      const newState = groupItems(apiShop.updateQuality());\n      console.log('Shop state after update:', newState);\n      return newState;\n    }\n    default:\n      // Do nothing\n  }\n  return state;\n}\n","export default class Shop {\n  static formatItemsData(items) {\n    return items.map((item) => ({\n      sku: item.sku,\n      name: item.name,\n      quality: item.quality || 0,\n      sellIn: item.sellIn || 0,\n    }));\n  }\n\n  constructor(items = []) {\n    this.items = Shop.formatItemsData(items);\n  }\n\n  getItems() {\n    return this.items;\n  }\n\n  updateQuality() {\n    for (let i = 0; i < this.items.length; i++) {\n      const item = this.items[i];\n\n      // Update quality. Note we will process sellIn separately at a later time.\n      // Once the sell by date has passed, Quality degrades twice as fast.\n      switch (item.sku) {\n        case 'BRIE':\n          // \"Aged Brie\" actually increases in Quality the older it gets.\n          // TODO: Ask about how quality is affected AFTER the sell by date.\n          item.quality += 1;\n          break;\n        case 'BSPASS':\n          // \"Backstage passes\", like aged brie, increases in Quality as its SellIn value approaches;\n          // Quality increases by 2 when there are 10 days or less and by 3 when there are 5 days or less but\n          // Quality drops to 0 after the concert\n          if (item.sellIn <= 1) {\n            item.quality = 0;\n          } else if (item.sellIn <= 6) {\n            item.quality += 3;\n          } else if (item.sellIn <= 11) {\n            item.quality += 2;\n          } else {\n            item.quality += 1;\n          }\n          break;\n        case 'GODLY':\n          break;\n        case 'MAGIC':\n          item.quality -= 2;\n          if (item.sellIn <= 0) {\n            item.quality -= 2;\n          }\n          break;\n        default:\n          item.quality -= 1;\n          if (item.sellIn <= 0) {\n            item.quality -= 1;\n          }\n      }\n\n      // Set boundaries on quality to between 0 to 50.\n      // Note special exception for GODLY.\n      if (item.sku !== 'GODLY') {\n        item.quality = Math.max(0, Math.min(50, item.quality));\n      }\n\n      // Update sellIn.\n      switch (item.sku) {\n        case 'GODLY':\n          break;\n        default:\n          item.sellIn -= 1;\n      }\n    }\n\n    return this.getItems();\n  }\n}\n","import { combineReducers, createStore } from 'redux';\nimport mainShopReducer from './modules/MainShop/MainShopReducer';\n\nconst allReducers = combineReducers({\n  mainShop: mainShopReducer,\n  // secondShop: secondShopReducer,\n  // motd: motdReducer,\n});\n\nconst oneStore = createStore(allReducers);\n\nexport default oneStore;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // TODO: Refactor sw code\n      // See https://jakearchibald.github.io/isserviceworkerready/resources.html\n      //     https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && typeof (navigator.serviceWorker) === 'object') {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if (typeof (navigator.serviceWorker) === 'object') {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MainShop from './modules/MainShop/components/MainShop';\nimport oneStore from './store';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={oneStore}>\n      <MainShop />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}